// 堆排序函数，输入整数切片，返回排序后的切片
func HeapSort(nums []int) []int {
	// 避免修改原切片，创建一个副本
 arr := make([]int, len(nums))
 copy(arr, nums)
	
	// 构建大顶堆
	n := len(arr)
	for i := n/2 - 1; i >= 0; i-- {
		heapify(arr, n, i)
	}
	
	// 逐个提取堆顶元素（最大值）
	for i := n - 1; i > 0; i-- {
		// 将当前堆顶（最大值）与堆尾元素交换
		arr[0], arr[i] = arr[i], arr[0]
		
		// 调整剩余元素为大顶堆
		heapify(arr, i, 0)
	}
	
	return arr
}

// 堆化函数，维护堆的性质
// n为堆的大小，i为需要堆化的节点索引
func heapify(arr []int, n, i int) {
	largest := i      // 初始化最大值为当前节点
	left := 2*i + 1   // 左子节点索引
	right := 2*i + 2  // 右子节点索引
	
	// 如果左子节点大于当前节点，更新最大值索引
	if left < n && arr[left] > arr[largest] {
		largest = left
	}
	
	// 如果右子节点大于当前最大值，更新最大值索引
	if right < n && arr[right] > arr[largest] {
		largest = right
	}
	
	// 如果最大值不是当前节点，则交换并递归堆化受影响的子树
	if largest != i {
		arr[i], arr[largest] = arr[largest], arr[i]
		heapify(arr, n, largest)
	}
}