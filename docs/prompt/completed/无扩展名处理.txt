src\service\parser\core\parse\DynamicParserManager.ts
该文件中独立实现了无扩展名处理：
    // 如果扩展名检测失败，尝试内容检测
    if (content) {
      return this.detectLanguageFromContent(content);
    }

    return null;
  }

  /**
   * 从内容检测语言
   */
  private detectLanguageFromContent(content: string): string | null {
    // 简单的内容启发式检测
    const patterns: Record<string, RegExp[]> = {
      javascript: [
        /function\s+\w+\s*\(/,
        /const\s+\w+\s*=/,
        /let\s+\w+\s*=/,
        /=>\s*{/,
      ],
      typescript: [
        /interface\s+\w+/,
        /type\s+\w+\s*=/,
        /:\s*\w+\[\]/,
        /as\s+\w+/,
      ],
      python: [
        /def\s+\w+\s*\(/,
        /class\s+\w+\s*:/,
        /import\s+\w+/,
        /from\s+\w+\s+import/,
      ],
      java: [
        /public\s+class\s+\w+/,
        /private\s+\w+\s+\w+/,
        /public\s+static\s+void\s+main/,
      ],
      go: [
        /func\s+\w+\s*\(/,
        /package\s+\w+/,
        /import\s+\(/,
      ],
      rust: [
        /fn\s+\w+\s*\(/,
        /let\s+mut\s+\w+/,
        /use\s+std::/,
      ],
      vue: [
        /<template>/,
        /<script/,
        /<style/,
        /export\s+default\s*{/,
        /v-[\w-]+=/,  // Vue指令
      ],
    };

    for (const [language, regexes] of Object.entries(patterns)) {
      for (const regex of regexes) {
        if (regex.test(content)) {
          return language;
        }
      }
    }

    return null;
  }

无扩展名的情况应当使用universal模块处理：
src\service\parser\universal\ExtensionlessFileProcessor.ts
src\service\parser\universal\BackupFileProcessor.ts