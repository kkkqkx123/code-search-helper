/**
 * 环境变量优化器
 * 提供环境变量命名标准化和映射功能
 */
export class EnvVarOptimizer {
  /**
   * 标准环境变量命名映射
   * 将旧的环境变量名映射到新的标准化命名
   */
  static readonly ENV_VAR_MAPPINGS: { [oldName: string]: string } = {
    // 通用配置映射
    'INFRA_COMMON_ENABLE_CACHE': 'INFRA_CACHE_ENABLED',
    'INFRA_COMMON_ENABLE_MONITORING': 'INFRA_MONITORING_ENABLED',
    'INFRA_COMMON_ENABLE_BATCHING': 'INFRA_BATCHING_ENABLED',
    'INFRA_COMMON_LOG_LEVEL': 'INFRA_LOG_LEVEL',
    'INFRA_COMMON_ENABLE_HEALTH_CHECKS': 'INFRA_HEALTH_CHECKS_ENABLED',
    'INFRA_COMMON_HEALTH_CHECK_INTERVAL': 'INFRA_HEALTH_CHECK_INTERVAL',
    'INFRA_COMMON_GRACEFUL_SHUTDOWN_TIMEOUT': 'INFRA_SHUTDOWN_TIMEOUT',

    // Qdrant缓存配置映射
    'INFRA_QDRANT_CACHE_DEFAULT_TTL': 'INFRA_QDRANT_CACHE_TTL',
    'INFRA_QDRANT_CACHE_MAX_ENTRIES': 'INFRA_QDRANT_CACHE_MAX_ENTRIES',
    'INFRA_QDRANT_CACHE_CLEANUP_INTERVAL': 'INFRA_QDRANT_CACHE_CLEANUP_INTERVAL',
    'INFRA_QDRANT_CACHE_ENABLE_STATS': 'INFRA_QDRANT_CACHE_STATS_ENABLED',

    // Qdrant性能配置映射
    'INFRA_QDRANT_PERFORMANCE_MONITORING_INTERVAL': 'INFRA_QDRANT_PERFORMANCE_INTERVAL',
    'INFRA_QDRANT_PERFORMANCE_METRICS_RETENTION_PERIOD': 'INFRA_QDRANT_PERFORMANCE_RETENTION',
    'INFRA_QDRANT_PERFORMANCE_ENABLE_DETAILED_LOGGING': 'INFRA_QDRANT_PERFORMANCE_LOGGING_ENABLED',
    'INFRA_QDRANT_PERFORMANCE_QUERY_EXECUTION_TIME': 'INFRA_QDRANT_PERFORMANCE_QUERY_TIMEOUT',
    'INFRA_QDRANT_PERFORMANCE_MEMORY_USAGE': 'INFRA_QDRANT_PERFORMANCE_MEMORY_THRESHOLD',
    'INFRA_QDRANT_PERFORMANCE_RESPONSE_TIME': 'INFRA_QDRANT_PERFORMANCE_RESPONSE_THRESHOLD',

    // Qdrant批处理配置映射
    'INFRA_QDRANT_BATCH_MAX_CONCURRENT_OPERATIONS': 'INFRA_QDRANT_BATCH_CONCURRENCY',
    'INFRA_QDRANT_BATCH_DEFAULT_BATCH_SIZE': 'INFRA_QDRANT_BATCH_SIZE_DEFAULT',
    'INFRA_QDRANT_BATCH_MAX_BATCH_SIZE': 'INFRA_QDRANT_BATCH_SIZE_MAX',
    'INFRA_QDRANT_BATCH_MIN_BATCH_SIZE': 'INFRA_QDRANT_BATCH_SIZE_MIN',
    'INFRA_QDRANT_BATCH_MEMORY_THRESHOLD': 'INFRA_QDRANT_BATCH_MEMORY_THRESHOLD',
    'INFRA_QDRANT_BATCH_PROCESSING_TIMEOUT': 'INFRA_QDRANT_BATCH_PROCESSING_TIMEOUT',
    'INFRA_QDRANT_BATCH_RETRY_ATTEMPTS': 'INFRA_QDRANT_BATCH_RETRY_ATTEMPTS',
    'INFRA_QDRANT_BATCH_RETRY_DELAY': 'INFRA_QDRANT_BATCH_RETRY_DELAY',
    'INFRA_QDRANT_BATCH_ADAPTIVE_BATCHING_ENABLED': 'INFRA_QDRANT_BATCH_ADAPTIVE_ENABLED',
    'INFRA_QDRANT_BATCH_PERFORMANCE_THRESHOLD': 'INFRA_QDRANT_BATCH_PERFORMANCE_THRESHOLD',
    'INFRA_QDRANT_BATCH_ADJUSTMENT_FACTOR': 'INFRA_QDRANT_BATCH_ADJUSTMENT_FACTOR',

    // Qdrant连接配置映射
    'INFRA_QDRANT_CONNECTION_MAX_CONNECTIONS': 'INFRA_QDRANT_CONNECTION_POOL_MAX',
    'INFRA_QDRANT_CONNECTION_MIN_CONNECTIONS': 'INFRA_QDRANT_CONNECTION_POOL_MIN',
    'INFRA_QDRANT_CONNECTION_CONNECTION_TIMEOUT': 'INFRA_QDRANT_CONNECTION_TIMEOUT',
    'INFRA_QDRANT_CONNECTION_IDLE_TIMEOUT': 'INFRA_QDRANT_CONNECTION_IDLE_TIMEOUT',
    'INFRA_QDRANT_CONNECTION_ACQUIRE_TIMEOUT': 'INFRA_QDRANT_CONNECTION_ACQUIRE_TIMEOUT',
    'INFRA_QDRANT_CONNECTION_VALIDATION_INTERVAL': 'INFRA_QDRANT_CONNECTION_VALIDATE_INTERVAL',
    'INFRA_QDRANT_CONNECTION_ENABLE_CONNECTION_POOLING': 'INFRA_QDRANT_CONNECTION_POOL_ENABLED',

    // Qdrant向量配置映射
    'INFRA_QDRANT_VECTOR_DEFAULT_COLLECTION': 'INFRA_QDRANT_VECTOR_COLLECTION_DEFAULT',
    'INFRA_QDRANT_VECTOR_COLLECTION_VECTOR_SIZE': 'INFRA_QDRANT_VECTOR_SIZE',
    'INFRA_QDRANT_VECTOR_COLLECTION_DISTANCE': 'INFRA_QDRANT_VECTOR_DISTANCE',
    'INFRA_QDRANT_VECTOR_COLLECTION_INDEXING_TYPE': 'INFRA_QDRANT_VECTOR_INDEX_TYPE',
    'INFRA_QDRANT_VECTOR_SEARCH_LIMIT': 'INFRA_QDRANT_VECTOR_SEARCH_LIMIT',
    'INFRA_QDRANT_VECTOR_SEARCH_THRESHOLD': 'INFRA_QDRANT_VECTOR_SEARCH_THRESHOLD',
    'INFRA_QDRANT_VECTOR_SEARCH_EXACT_SEARCH': 'INFRA_QDRANT_VECTOR_SEARCH_EXACT_ENABLED',

    // Nebula缓存配置映射
    'INFRA_NEBULA_CACHE_DEFAULT_TTL': 'INFRA_NEBULA_CACHE_TTL',
    'INFRA_NEBULA_CACHE_MAX_ENTRIES': 'INFRA_NEBULA_CACHE_MAX_ENTRIES',
    'INFRA_NEBULA_CACHE_CLEANUP_INTERVAL': 'INFRA_NEBULA_CACHE_CLEANUP_INTERVAL',
    'INFRA_NEBULA_CACHE_ENABLE_STATS': 'INFRA_NEBULA_CACHE_STATS_ENABLED',

    // Nebula性能配置映射
    'INFRA_NEBULA_PERFORMANCE_MONITORING_INTERVAL': 'INFRA_NEBULA_PERFORMANCE_INTERVAL',
    'INFRA_NEBULA_PERFORMANCE_METRICS_RETENTION_PERIOD': 'INFRA_NEBULA_PERFORMANCE_RETENTION',
    'INFRA_NEBULA_PERFORMANCE_ENABLE_DETAILED_LOGGING': 'INFRA_NEBULA_PERFORMANCE_LOGGING_ENABLED',
    'INFRA_NEBULA_PERFORMANCE_QUERY_EXECUTION_TIME': 'INFRA_NEBULA_PERFORMANCE_QUERY_TIMEOUT',
    'INFRA_NEBULA_PERFORMANCE_MEMORY_USAGE': 'INFRA_NEBULA_PERFORMANCE_MEMORY_THRESHOLD',
    'INFRA_NEBULA_PERFORMANCE_RESPONSE_TIME': 'INFRA_NEBULA_PERFORMANCE_RESPONSE_THRESHOLD',

    // Nebula批处理配置映射
    'INFRA_NEBULA_BATCH_MAX_CONCURRENT_OPERATIONS': 'INFRA_NEBULA_BATCH_CONCURRENCY',
    'INFRA_NEBULA_BATCH_DEFAULT_BATCH_SIZE': 'INFRA_NEBULA_BATCH_SIZE_DEFAULT',
    'INFRA_NEBULA_BATCH_MAX_BATCH_SIZE': 'INFRA_NEBULA_BATCH_SIZE_MAX',
    'INFRA_NEBULA_BATCH_MIN_BATCH_SIZE': 'INFRA_NEBULA_BATCH_SIZE_MIN',
    'INFRA_NEBULA_BATCH_MEMORY_THRESHOLD': 'INFRA_NEBULA_BATCH_MEMORY_THRESHOLD',
    'INFRA_NEBULA_BATCH_PROCESSING_TIMEOUT': 'INFRA_NEBULA_BATCH_PROCESSING_TIMEOUT',
    'INFRA_NEBULA_BATCH_RETRY_ATTEMPTS': 'INFRA_NEBULA_BATCH_RETRY_ATTEMPTS',
    'INFRA_NEBULA_BATCH_RETRY_DELAY': 'INFRA_NEBULA_BATCH_RETRY_DELAY',
    'INFRA_NEBULA_BATCH_ADAPTIVE_BATCHING_ENABLED': 'INFRA_NEBULA_BATCH_ADAPTIVE_ENABLED',
    'INFRA_NEBULA_BATCH_PERFORMANCE_THRESHOLD': 'INFRA_NEBULA_BATCH_PERFORMANCE_THRESHOLD',
    'INFRA_NEBULA_BATCH_ADJUSTMENT_FACTOR': 'INFRA_NEBULA_BATCH_ADJUSTMENT_FACTOR',

    // Nebula连接配置映射
    'INFRA_NEBULA_CONNECTION_MAX_CONNECTIONS': 'INFRA_NEBULA_CONNECTION_POOL_MAX',
    'INFRA_NEBULA_CONNECTION_MIN_CONNECTIONS': 'INFRA_NEBULA_CONNECTION_POOL_MIN',
    'INFRA_NEBULA_CONNECTION_CONNECTION_TIMEOUT': 'INFRA_NEBULA_CONNECTION_TIMEOUT',
    'INFRA_NEBULA_CONNECTION_IDLE_TIMEOUT': 'INFRA_NEBULA_CONNECTION_IDLE_TIMEOUT',
    'INFRA_NEBULA_CONNECTION_ACQUIRE_TIMEOUT': 'INFRA_NEBULA_CONNECTION_ACQUIRE_TIMEOUT',
    'INFRA_NEBULA_CONNECTION_VALIDATION_INTERVAL': 'INFRA_NEBULA_CONNECTION_VALIDATE_INTERVAL',
    'INFRA_NEBULA_CONNECTION_ENABLE_CONNECTION_POOLING': 'INFRA_NEBULA_CONNECTION_POOL_ENABLED',

    // Nebula图配置映射
    'INFRA_NEBULA_GRAPH_DEFAULT_SPACE': 'INFRA_NEBULA_GRAPH_SPACE_DEFAULT',
    'INFRA_NEBULA_GRAPH_SPACE_PARTITION_NUM': 'INFRA_NEBULA_GRAPH_PARTITION_COUNT',
    'INFRA_NEBULA_GRAPH_SPACE_REPLICA_FACTOR': 'INFRA_NEBULA_GRAPH_REPLICA_FACTOR',
    'INFRA_NEBULA_GRAPH_SPACE_VID_TYPE': 'INFRA_NEBULA_GRAPH_VID_TYPE',
    'INFRA_NEBULA_GRAPH_QUERY_TIMEOUT': 'INFRA_NEBULA_GRAPH_QUERY_TIMEOUT',
    'INFRA_NEBULA_GRAPH_QUERY_RETRY_ATTEMPTS': 'INFRA_NEBULA_GRAPH_QUERY_RETRIES',
    'INFRA_NEBULA_GRAPH_SCHEMA_AUTO_CREATE_TAGS': 'INFRA_NEBULA_GRAPH_SCHEMA_TAGS_AUTO',
    'INFRA_NEBULA_GRAPH_SCHEMA_AUTO_CREATE_EDGES': 'INFRA_NEBULA_GRAPH_SCHEMA_EDGES_AUTO',

    // 事务配置映射
    'INFRA_TRANSACTION_TIMEOUT': 'INFRA_TRANSACTION_TIMEOUT',
    'INFRA_TRANSACTION_RETRY_ATTEMPTS': 'INFRA_TRANSACTION_RETRIES',
    'INFRA_TRANSACTION_RETRY_DELAY': 'INFRA_TRANSACTION_RETRY_DELAY',
    'INFRA_TRANSACTION_ENABLE_TWO_PHASE_COMMIT': 'INFRA_TRANSACTION_2PC_ENABLED',
    'INFRA_TRANSACTION_MAX_CONCURRENT_TRANSACTIONS': 'INFRA_TRANSACTION_CONCURRENCY',
    'INFRA_TRANSACTION_DEADLOCK_DETECTION_TIMEOUT': 'INFRA_TRANSACTION_DEADLOCK_TIMEOUT',
    'INFRA_TRANSACTION_ISOLATION_LEVEL': 'INFRA_TRANSACTION_ISOLATION'
  };

  /**
   * 标准化的配置前缀定义
   */
  static readonly CONFIG_PREFIXES = {
    COMMON: 'INFRA',
    QDRANT: 'INFRA_QDRANT',
    NEBULA: 'INFRA_NEBULA',
    TRANSACTION: 'INFRA_TRANSACTION'
  };

  /**
   * 获取标准化的环境变量值
   * 首先尝试新命名，然后回退到旧命名
   */
  static getEnvValue(key: string): string | undefined {
    // 首先尝试原始键名
    let value = process.env[key];
    if (value !== undefined) {
      return value;
    }

    // 检查是否是旧命名，并尝试映射到新命名
    if (this.ENV_VAR_MAPPINGS[key]) {
      value = process.env[this.ENV_VAR_MAPPINGS[key]];
      if (value !== undefined) {
        return value;
      }
    }

    // 如果没有映射，返回undefined
    return undefined;
  }

  /**
   * 获取环境变量值，提供默认值
   */
  static getEnvValueWithDefault(key: string, defaultValue: string): string {
    const value = this.getEnvValue(key);
    return value !== undefined ? value : defaultValue;
  }

  /**
   * 获取环境变量中的数字值，提供默认值
   */
  static getEnvNumberValue(key: string, defaultValue: number): number {
    const value = this.getEnvValue(key);
    if (value === undefined) {
      return defaultValue;
    }
    const parsedValue = parseInt(value, 10);
    return isNaN(parsedValue) ? defaultValue : parsedValue;
  }

  /**
   * 获取环境变量中的布尔值，提供默认值
   */
  static getEnvBooleanValue(key: string, defaultValue: boolean): boolean {
    const value = this.getEnvValue(key);
    if (value === undefined) {
      return defaultValue;
    }
    return value.toLowerCase() !== 'false';
  }

  /**
   * 获取环境变量中的浮点数值，提供默认值
   */
  static getEnvFloatValue(key: string, defaultValue: number): number {
    const value = this.getEnvValue(key);
    if (value === undefined) {
      return defaultValue;
    }
    const parsedValue = parseFloat(value);
    return isNaN(parsedValue) ? defaultValue : parsedValue;
  }

  /**
   * 获取所有环境变量映射信息
   */
  static getAllMappings(): { oldName: string; newName: string }[] {
    return Object.entries(this.ENV_VAR_MAPPINGS).map(([oldName, newName]) => ({
      oldName,
      newName
    }));
  }

  /**
   * 检查是否有任何旧命名的环境变量被使用
   */
  static checkForLegacyEnvVars(): string[] {
    const usedLegacyVars: string[] = [];

    for (const [oldName, newName] of Object.entries(this.ENV_VAR_MAPPINGS)) {
      if (process.env[oldName] !== undefined) {
        usedLegacyVars.push(`${oldName} -> ${newName}`);
      }
    }

    return usedLegacyVars;
  }
}